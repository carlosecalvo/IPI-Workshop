IPI R Workshop: Handling Data
========================================================
author: Carlos Calvo Hernandez 
date: December 5, 2018
autosize: true

Prerequisites
========================================================
- We're gonna use these libraries:
```{r}
library(nycflights13)
library(tidyverse)
```
```{r, echo=FALSE}
options(tibble.print_max = 4, tibble.print_min = 3)
```


Data: nycflights13
========================================================

```{r}
flights
```

dplyr Basics
========================================================

The "verbs" from ```dplyr``` package
```{r, eval=FALSE}
filter() #Pick observations by their values
arrange() #Reorder the rows
select() #Pick variables by their names
mutate() #Create new variables with functions of existing variables
summarize() #Collapse many values down to a single summary
```

Filter()
========================================================

- ```filter()``` allows to subset observations based on their values

```{r}
filter(flights, month == 12, day == 1)
```

Filter()
========================================================

- To save this result we need to assign the argument to a new data frame
```{r}
dec1 <- filter(flights, month == 12, day == 1)
```
- R either prints the results or saves them to a variable. To do both, wrap the assignment in parentheses

```{r, eval=FALSE}
(dec25 <- filter(flights, month == 12, day == 25))
```

Filter(): Comparisons
========================================================
incremental: true
- R handles the standard suite of comparison operators: >, <, >=, <=, !=, and ==

```
filter(flights, month = 1)
#> Error: `month` (`month = 1`) must not be named, do you need `==`?
```
- Weird points: Floating point numbers
```{r}
sqrt(2) ^ 2 == 2
```

Filter(): Comparisons
========================================================
incremental: true

```{r}
1 / 49 * 49 == 1
```

- Use ```near()``` instead

```{r}
near(sqrt(2) ^ 2, 2)
near(1 / 49 * 49, 1)
```


Filter(): Logical Operators
========================================================

- Boolean Operator Cheatsheet: $ (and), | (or), ! (not)

![Boolean Operators Cheatsheet](boolean.png)
- E.g.
```{r, eval=FALSE}
filter(flights, month == 11 & month == 12)
```

Filter(): Logical Operators
========================================================
incremental: true
- Lets say we want to find all flights that departed in November or December.
```{r}
filter(flights, month %in% c(11, 12))
```

Filter(): Logical Operators
========================================================
- De Morgan's Law
```{r, eval=FALSE}
filter(flights, !(arr_delay > 120 | dep_delay > 120))

filter(flights, arr_delay <= 120, dep_delay <= 120)
```

- These two statements provide the same results.

Arrange()
========================================================

- Works similarly to ```filter()``` except that instead of selecting rows, it changes their order. It orders data sets by column names (or more complicated expressions)

```{r}
arrange(flights, year, month, day)
```


Arrange()
========================================================
- Use ```desc()``` to order in descending order

```{r}
arrange(flights, desc(dep_delay))
```

Select()
========================================================

- Allows to rapidly zoom in on useful subsets of variables using operations based on their names.

```{r}
#Select column by name
select(flights, year, month, day)
```

Select()
========================================================
```{r}
#Select all columns between year and day (inclusive)
select(flights, year:day)
```

Select()
========================================================

```{r}
#Select all columns except those from year to day (inclusive)
select(flights, -(year:day))
```

Select(): Helper Functions
========================================================

```{r, eval=FALSE}
starts_with("abc") #matches names that begin with "abc"
ends_with("xyz") #matches names that end with "xyz"
contains("ijk") #matches names that contain "ijk"
matches("(.)\\1") #selects variables that match a regular expression
num_range("x", 1:3) #matches x1, x2, and x3
```

Select(): Not dropping everything!
========================================================

```{r}
select(flights, time_hour, air_time, everything())
```


Rename(): Select() little brother
========================================================

- ```rename()``` keeps all variables that aren't explicitly mentioned
```{r}
rename(flights, tail_num = tailnum)
```

Mutate()
========================================================

- Adds new variables that are functions of existing variables.

```{r}
flights_sml <- select(flights, year:day, ends_with("delay"), distance, air_time)

mutate(flights_sml, gain = dep_delay - arr_delay, speed = distance / air_time * 60)
```

Mutate()
========================================================

```{r}
mutate(flights_sml, gain = dep_delay - arr_delay, hours = air_time / 60, gain_per_hour = gain / hours)
```

Mutate()
========================================================
- To only keep the new variables:
```{r}
transmute(flights_sml, gain = dep_delay - arr_delay, hours = air_time / 60, gain_per_hour = gain / hours)
```

Mutate(): Useful creating functions
========================================================

- Arithmetic operators: +, -, *, /, ^
- Modular arithmetic: %/% (integer division), %% (remainder).
- Logs: log(), log2(), log10()
- Offsets: lead(), and lag()
- Cumulative and running aggregates: cumsum(), cumprod(), cummin(), cummax(), and cummean().
- Logical comparisons: >, <, >=, <=, !=, and ==
- Ranking: min_rank(), row_number(x), ntile(x, n), dense_rank(x), percent_rank(x), and cume_dist(x)

Summarise()
========================================================

- Collapses a data frame to a single row

```{r}
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
```

- This is not terribly helpful. Introducing ```group_by()```

Summarise() and Group_by()
========================================================


```{r}
by_day <- group_by(flights, year, month, day)

summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
```

- Applied on a grouped data frame it'll be automatically applied "by group". Same with every ```dplyr``` verb.

The Pipe (again)
========================================================
- Lets explore the relationship between distance and average delay per location

```{r}
by_dest <- group_by(flights, dest)
delay <- summarise(by_dest,
  count = n(),
  dist = mean(distance, na.rm = TRUE),
  delay = mean(arr_delay, na.rm = TRUE)
)

delay <- filter(delay, count > 20, dest != "HNL")
```

The Pipe (again)
========================================================
```{r}
delay
```

The Pipe (again)
========================================================
```{r, echo=FALSE}
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
  geom_point(aes(size = count), alpha = 1/3) +
  geom_smooth(se = FALSE)
```

The Pipe (again)
========================================================

- Using a pipe
```{r}
delays <- flights %>% 
  group_by(dest) %>% 
  summarise(
    count = n(),
    dist = mean(distance, na.rm = TRUE),
    delay = mean(arr_delay, na.rm = TRUE)
  ) %>% 
  filter(count > 20, dest != "HNL")
```

***

- Not using a pipe
```{r, eval=FALSE}
by_dest <- group_by(flights, dest)
delay <- summarise(by_dest,
  count = n(),
  dist = mean(distance, na.rm = TRUE),
  delay = mean(arr_delay, na.rm = TRUE)
)

delay <- filter(delay, count > 20, dest != "HNL")
```

Missing values
========================================================

- ```na.rm = TRUE``` removes any missing value from the input before performing the aggregation and so omits it from the output.
- Removing the NAs (cancelled flights) first might be more useful. 
```{r, eval=FALSE}
not_cancelled <- flights %>% 
  filter(!is.na(dep_delay), !is.na(arr_delay))

not_cancelled %>% 
  group_by(year, month, day) %>% 
  summarise(mean = mean(dep_delay))
```

Summarise(): Useful summary functions
========================================================

- Measures of location: mean(x), median(x)
- Measures of spread: sd(x), IQR(x), mad(x) (median absolute deviation)
- Measures of rank: min(x), quantile(x, 0.25), max(x)
- Measures of position: first(x), nth(x), last(x)
- Counts: n(), sum(!is.na(x)), n_distinct(x)
- Proportions of logical values: sum(x > 10), mean(y == 0) 

Grouping by multiple variables
========================================================

- Grouping by multiple variables each summary peels off one level of the grouping

```{r}
daily <- group_by(flights, year, month, day)
(per_day <- summarise(daily, flights = n()))
```

Grouping by multiple variables
========================================================


```{r}

(per_month <- summarise(per_day, flights = sum(flights)))
```

Grouping by multiple variables
========================================================


```{r}

(per_year <- summarise(per_month, flights = sum(flights)))
```

Ungroup()
========================================================
- To remove grouping and return to operation on ungrouped data
```{r}
daily %>%
  ungroup() %>% #removes grouping by date
  summarise(flights = n()) #all flights
```

More examples
========================================================
source: Data_transformation.R /#Data Transformation Verbs for Dplyr/

Data_transformation.R in the Project folder
